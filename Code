# Q1:

# A
l1=["HTTP","HTTPS","FTP","DNS"]
l2=[80,443,21,53]
d={}
for k,v in zip(l1,l2):
    d[k]=v
print(d)

# B
while True:
    n = eval(input("enter number : "))
    factorial = 1
    for i in range(1, n + 1):
        factorial *= i
    print('Factorial of %d is %d' % (n, factorial))

# C
L=["Network","Bio","Programming","Physics","Music"]
for i in range(len(L)) :
    if L[i].startswith('B'):
        print(L[i])

# D
d={x:x+1 for x in range(0,11)}
print(d)

# Q2 :

B=list(input("enter binary number : "))
D=0
for i in range(len(B)):
    t=B.pop()
    if t == "1" :
        D=D+pow(2,i)
print(D)

# Q3 :

f = "morhaf.txt"
infile = open(f,'r')
r = infile.read()
s = r.split()
infile.close()
degre = 0
for i in s :
    print(i[ :-1])
    r = input ()
    if r == i[-1] :
        degre+=1
user = input("enter your name ")
r = user + " , "+ str(degre)+"/20"
print (r)
out = open("2848.csv",'w')
out.write(r)
out.close()

# Q4 :

#Define a class BankAccount
class Bank_Account:
     def __init__(self, account_number="", account_holder="",balance=0.0):
         self.account_number = account_number
         self.account_holder = account_holder
         self.balance = balance
     def deposit(self, amount):
         if amount > 0:
             self.balance += amount
             print("Amount deposited :",amount,"\nThe balance :",self.balance)
         else:
             print("You will be enter positef amount")
     def withdraw(self, amount):
         if 0 < amount and amount <= self.balance:
             self.balance -= amount
             print("Amount withdrawn :",amount,"\nThe balance :",self.balance)
         else:
             print("Insufficient balance or invalid withdrawal amount.")
     def get_balance(self) :
        print("Available Balance = ",self.balance) 
     def __str__(self):
         return str(self.balance)
#Define a subclass SavingsAccount that inherits from BankAccount
class SavingsAccount(Bank_Account):
     def __init__(self, account_number="", account_holder="",interest_rate=0.0):
         super().__init__(account_number, account_holder)
         self.interest_rate = interest_rate
     def apply_interest(self):
         interest = self.balance * self.interest_rate / 100
         self.balance += interest
         print("Applied interest : ",interest,"\nThe balance : ",self.balance)
     def __str__(self):
         return ("\nDear "+str(self.account_holder) +"\nYour balance is : "+str(self.balance)+"\nwith interest "+str(self.interest_rate)+"%")
         
# Create an instance of BankAccount
account = Bank_Account("2848", "Morhaf Edah")
# Perform a deposit of $1000
account.deposit(1000)
# Perform a withdrawal of $500
account.withdraw(500)
# Print the current balance after each operation
account.get_balance()

# Create an instance of SavingsAccount
savings_account = SavingsAccount("2848", "Morhaf Edah",interest_rate=5)
# Perform a deposit of $5000
savings_account.deposit(5000)
# Apply interest
savings_account.apply_interest()
# Print the current balance and interest rate
print(savings_account)
